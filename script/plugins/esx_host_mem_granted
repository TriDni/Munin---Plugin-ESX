#!/usr/bin/perl -w

use strict;
use warnings;
use Data::Dumper;
use Munin::Plugin;
use Storable;

###Vérification de la mise à jour du fichier
my $esx = $ENV{address} || undef;
my $user = $ENV{user} || "administrateur"; 
my $password = $ENV{password} || "qlsat";
my $path = $ENV{path} || "/tmp/";
my $file_path = $path."dump_host_".$esx.".dump";
my $host_lock_path = $path."dump_host_".$esx.".lock";
my $vm_lock_path = $path."dump_vm_".$esx.".lock";
my $datastore_lock_path = $path."dump_datastore_".$esx.".lock";
my $script_path = $ENV{collector} || "/home/stagiaire/PluginsESX/";
my $host = $ENV{host} || undef;
my $cluster = $ENV{cluster} || undef;
my $hostname = $ENV{hostname} || undef;

if (-e $file_path && ((time - (`stat -c %Y $file_path`)) >= 300)) {#300 (secondes) correspond à 5 minutes d'age maximal
  system("perl ".$script_path."get_ressource_esx --address '$esx' --user '$user' --password '$password' --default-path '$path'");
	while (-e $host_lock_path && !-e $file_path) {
		sleep 1;
		}
	} 
if (!-e $file_path && !-e $host_lock_path) {
	system("perl ".$script_path."get_ressource_esx --address '$esx' --user '$user' --password '$password' --default-path '$path'");
        while (-e $host_lock_path && !-e $file_path) {
                sleep 1;
                }
	}
if (-e $host_lock_path) {
        system("perl ".$script_path."get_ressource_esx --address '$esx' --user '$user' --password '$password' --force --default-path '$path'");
        while (-e $vm_lock_path && -e $datastore_lock_path && -e $host_lock_path && !-e $file_path) {
                sleep 1;
                }
        }

my $values = retrieve($file_path);

######Exemple - Structure######
###Consommation Memoire Consommée  ###

if ( exists $ARGV[0] and $ARGV[0] eq "config" ) {
	if (defined $hostname) { print "host_name ".$hostname."\n"; }
	print "graph_title ".graph_title($cluster, $host)." ESX Host Memory Granted\n";
        print "graph_vlabel Memory Granted (bytes)\n";
        print "graph_category memory\n";
	print "graph_args --base 1024 -l 0\n";
	
        my @tablabel;
        foreach my $vm (@$values) {
		if (filter($host, ${$vm}{name}, $cluster, ${$vm}{cluster}) == 1) {
                        push (@tablabel, ${$vm}{cluster}." - ".${$vm}{name}.",".${$vm}{id}.".label ");
			}
		}
	foreach my $label (sort @tablabel) {
                my @words = split(/,/, $label);
                print $words[1].$words[0]."\n";
		}
        }
else {
	foreach my $vm (@$values) {
                if (filter($host, ${$vm}{name}, $cluster, ${$vm}{cluster}) == 1) {
                        print ${$vm}{id}.".value ".${$vm}{memgranted}."\n";
			}
		}

}

sub filter {
	my ($host, $host_val, $cluster, $cluster_val) = @_;
	my $return = 0;

	if (defined $cluster && ($cluster eq $cluster_val)) {
                if (defined $host && ($host eq $host_val)) {
                        $return = 1;
			}
                else {
                        $return = 1;
			}
                }
        elsif (defined $host && !defined $cluster && ($host eq $host_val)) {
                $return = 1;
		}
        elsif (!defined $host && !defined $cluster) {
                $return = 1;
		}

	return $return;
	}

sub graph_title {
	my ($cluster, $host) = @_;
	my $result;
	
	if (defined $host) {
                if (defined $result) { $result .= " - ".$host; }
                else { $result = $host; }
                }
	if (defined $cluster) {
		if (defined $result) { $result .= " - ".$cluster; }
		else { $result = $cluster; }

		$result = $cluster;
		}
	return $result;
}
